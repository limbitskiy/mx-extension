import { ContentScriptContext } from "wxt/client";
import App from "../components/App.vue";
import Overlay from "../components/Overlay.vue";
import { createApp } from "vue";
import "./reset.css";

let app: ComponentPublicInstance;

export default defineContentScript({
  matches: ["<all_urls>"],
  cssInjectionMode: "ui",

  async main(ctx) {
    if (location.search.includes("parser")) {
      // console.log(`includes parser`);

      const ui = await defineOverlay(ctx);

      // Mount initially
      ui.mount();

      // Re-mount when page changes
      ctx.addEventListener(window, "wxt:locationchange", (event) => {
        if (location.search.includes("parser")) {
          // console.log(`includes parser`);
          ui.mount();
        }
      });
    } else {
      // console.log(`doesn't include parser`);
      const ui = await createShadowRootUi(ctx, {
        name: "example-ui",
        position: "inline",
        anchor: "body",
        onMount: (container) => {
          const _app = createApp(App);

          app = _app.mount(container);
          return _app;
        },
        onRemove: (app) => {
          app?.unmount();
        },
      });

      ui.mount();
    }
  },
});

function defineOverlay(ctx: ContentScriptContext) {
  return createShadowRootUi(ctx, {
    name: "vue-overlay",
    position: "modal",
    zIndex: 99999,
    onMount(container, _shadow, shadowHost) {
      const app = createApp(Overlay);
      app.mount(container);
      // shadowHost.style.pointerEvents = "none";
      return app;
    },
    onRemove(app) {
      app?.unmount();
    },
  });
}

// browser.runtime.onMessage.addListener((event) => {
//   if (event.type === "openInTab") {
//     console.log("üöÄ ~ event:", event);
//   }
// });

// onMessage("openHref", (href) => {
//   console.log("üöÄ ~ href:", href);
// });

// const localization = {
//   app_title: "–ú–æ–∏ —Ö–æ—Ç–µ–ª–∫–∏",
//   save: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
//   delete: "–£–¥–∞–ª–∏—Ç—å",
//   // ---
//   settings: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
//   settings_city_label: "–í–∞—à –≥–æ—Ä–æ–¥:",
//   settings_city_placeholder: "–ú–æ—Å–∫–≤–∞",
//   settings_notifications_label: "–ö—É–¥–∞ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
//   settings_notifications_placeholder: "–ú–æ—Å–∫–≤–∞",
//   // ---
//   confirm_telegram_title: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Telegram",
//   confirm_telegram_message: "–û—Ç–∫—Ä—ã–≤–∞—é Telegram bot<br />–ù–∞–∂–º–∏—Ç–µ –≤ –±–æ—Ç–µ –∫–Ω–æ–ø–∫—É Start",
//   confirm_telegram_button: "–Ø –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞",
//   // ---
//   confirm_email_title: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email",
//   confirm_email_message: "–ù–∞ –≤–∞—à—É –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º",
//   confirm_email_label: "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:",
//   confirm_email_button: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email",
//   // ---
//   links_title: "–°—Å—ã–ª–∫–∏",
//   // ---
//   folders_title: "–ü–∞–ø–∫–∏",
//   folders_no_folders: "–¢—É—Ç –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É. <br /> –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ö–æ—Ç–µ–ª–∫–∏, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É <b>Save</b> —Å –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —ç–∫—Ä–∞–Ω–∞ –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞.",
//   // ---
//   unknown_route_title: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∞–π—Ç",
//   unknown_route_message: "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –Ω–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ö–æ—Å—Ç –∫ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É",
//   unknown_route_button: "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å",
//   // ---
//   404: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
// };
